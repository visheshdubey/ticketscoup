// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    CLIENT
    STAFF
    MANAGER
    ADMIN
    DEVELOPER
}

enum TicketStatus {
    TODO
    IN_PROGRESS
    HOLD
    DONE
    CANCELLED
}

enum NotificationChannel {
    EMAIL
    PUSH
}

model User {
    id              Int               @id @default(autoincrement())
    email           String            @unique
    name            String?
    phone           String?
    provider        String?
    isBlocked       Boolean           @default(false)
    isEmailVerified Boolean           @default(false)
    fcmToken        String?
    avatar          String?
    role            Role              @default(CLIENT)
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    TeamUserProfile TeamUserProfile[]
    Ticket          Ticket[]
}

model Team {
    id              Int               @id @default(autoincrement())
    name            String
    isActive        Boolean           @default(false)
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    TeamTicketType  TeamTicketType[]
    TeamUserProfile TeamUserProfile[]
    Notification    Notification[]
}

model TeamTicketType {
    id         Int      @id @default(autoincrement())
    ticketName String
    team       Team     @relation(fields: [teamId], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    teamId     Int
    Ticket     Ticket[]
}

model TeamUserProfile {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    team      Team     @relation(fields: [teamId], references: [id])
    role      Role     @default(CLIENT)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    Int
    teamId    Int
}

model Ticket {
    id               Int            @id @default(autoincrement())
    status           TicketStatus   @default(TODO)
    assignedTo       User?          @relation(fields: [userId], references: [id])
    subscribers      String[]
    chat             TicketChat[]
    type             TeamTicketType @relation(fields: [teamTicketTypeId], references: [id])
    updatedBy        String
    createdBy        String
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    teamTicketTypeId Int
    userId           Int?
}

model TicketChat {
    id                  Int      @id @default(autoincrement())
    text                String?
    attachment          String[]
    updatedBy           String //User Id
    shouldNotifyOnEmail Boolean  @default(false)
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt
    Ticket              Ticket?  @relation(fields: [ticketId], references: [id])
    ticketId            Int?
}

model Notification {
    id        Int                   @id @default(autoincrement())
    channels  NotificationChannel[] @default([PUSH])
    content   String?
    image     String?
    audience  String[]
    eventType String
    team      Team                  @relation(fields: [teamId], references: [id])
    createdAt DateTime              @default(now())
    updatedAt DateTime              @updatedAt
    teamId    Int
}
